extends layout

block head
    link(rel='stylesheet', href='/stylesheets/style.css')
    style.
        .votingItemTitle {
            color: #74777B !important;
        }

        .voteWr {
            padding: 34px !important;
        }

        .voteTitle.left {
            text-align: center !important;
            margin-bottom: 8px;
        }
block content
    .tower#app
        .adminBottom
            .voteWr(v-if="vote.length>0" )
                .voteTitle(v-bind:class="{left:vote[0].iscompl}") {{vote[0].title}}

                .voteComplBox
                    .votingItem(v-for="item in vote[0].answers")
                        .votingItemTitle {{item.title}}
                        .votingItemRes
                            .votingItemResStart &nbsp;
                                span(v-if="vote[0].iscompl") {{getPercent(vote[0].total, item.count)}}
                            .votingItemResEnd(v-if="vote[0].iscompl" v-bind:style="{width:getPercent(vote[0].total, item.count)}") &nbsp;


            .voteWr(v-if="raiting.length>0" )
                .voteTitle(v-bind:class="" v-html="raiting[0].title")

                .voteComplBox
                    .votingItem(v-for="item, i in raiting[0].answers" style="margin-left: 48px;")
                        //.votingItemTitle(v-if="raiting[0].iscompl" style="width:100%" ) <span class="raitingNo">{{i+1}}:</span> {{item.title}}
                        .votingItemTitle(v-if="!raiting[0].iscompl" style="width:100%" v-html="'&#8226;&nbsp;'+item.title")
                        div(v-else style="display:flex;align-items: center;width: 100%;")
                            .votingItemTitle(style="width:50%;padding-right: 1em;" ) <span class="raitingNo">{{i+1}}:</span> {{item.title}}
                            .votingItemRes(style="display: flex;")
                                .votingItemResStart(style="width: 180px;") &nbsp;
                                    span(v-if="raiting[0].iscompl") {{getRaitingPercent(raiting[0], item.count, i)}}
                                .votingItemResBox(v-if="raiting[0].iscompl" style="width:calc(100% - 180px)")
                                    .votingItemResEnd( v-bind:style="{width:getRaitingCalcPercent(raiting[0], item.count, i)}") &nbsp;




    script(src="https://front.sber.link/vcbr/javascripts/vue.min.js")
    script(src="https://front.sber.link/vcbr/javascripts/moment.min.js")
    style.
        body {
            width: 1920px;
            height: 1280px;
            overflow: hidden
        }

        .voteWr {
            position: inherit;
            border-radius: 40px;
        }

        .adminBottom {
            display: flex;
            align-content: center;
            flex-wrap: wrap;
        }

        .voteTitle {
            margin-bottom: 78px;
            font-weight: 500;
            font-size: 52px;
            line-height: 60px;
        }

        .votingItem {

            color: #FFFFFF;
            font-size: 42px;
            margin-bottom: 12px;
            line-height: 48px;
            padding: 8px 0;
        }

        .votingItemResStart {
            width: 175px;
        }
        .voteTitle{
            background: #F4F2F2;
            padding: 24px;
            border-radius: 24px;
        }
    script.
        var app = new Vue({
            el: "#app",
            data: {
                vote: [],
                raiting: [],
            },
            methods: {
                getRaitingCalcPercent: function (raiting, count, i) {

                    var perc = this.getRaitingPercent(raiting, count, i);
                    return  perc
                },
                getRaitingPercent: function (raiting, count, i) {
                    let total=0;
                    raiting.answers.forEach(a=>{
                        total+=a.count;
                    })

                    if (total == 0)
                        return "0%"
                    let fakeCount=raiting.answers[raiting.answers.length-1-i].count

                    var perc = ((parseFloat(fakeCount) / parseFloat(total) * 100));
                    //perc=100-perc;
                    return perc.toPrecision(3) + "%"


                },
                getCalcPercent: function (total, count) {

                    var perc = this.getPercent(total, count);
                    return 'calc(100% - ' + perc + ')';
                },
                getPercent: function (total, count) {
                    if (total == 0)
                        return "0%"
                    var perc = (parseFloat(count) / parseFloat(total) * 100);
                   console.log(perc)
                    return perc.toPrecision(4) + "%"
                },
                updateStatus: async function () {
                    try {
                        var d = await axios.get("/vcbr/status/");

                        this.vote = d.data.vote
                        let tmp = d.data.raiting;
                        tmp.forEach((item) => {
                            if (item.iscompl) {
                                item.answers.sort((a, b) => {
                                    return a.count - b.count
                                });
                            }
                        });
                        this.raiting=tmp;
                    } catch (e) {
                        console.warn(e);
                    }
                    setTimeout(() => {
                        this.updateStatus();
                    },  1000)
                }
            },
            mounted: function () {
                this.updateStatus();

            }
        })

